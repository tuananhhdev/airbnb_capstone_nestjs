import { BadRequestException, Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { getSafeData } from 'src/common/utils/safe-data.util';
import { CreateBookRoomDto } from './dto/create-book-room.dto';
import { UpdateBookRoomDto } from './dto/update-book-room.dto';
import { getPaginationParams, buildPaginationResult } from 'src/common/utils/pagination.util';


// Constants cho flexible update rules
const UPDATE_TIME_RULES = {
    DATES_CHANGE: 24,    // Thay ƒë·ªïi ng√†y c·∫ßn 24h
    GUESTS_CHANGE: 6,    // Thay ƒë·ªïi s·ªë kh√°ch c·∫ßn 6h
    MINOR_CHANGE: 2,     // Thay ƒë·ªïi nh·ªè c·∫ßn 2h
    DEFAULT: 12          // Default fallback
} as const;

// Constants cho flexible cancellation rules
const CANCELLATION_RULES = {
    FREE_CANCELLATION: 48,      // H·ªßy mi·ªÖn ph√≠: 48h tr∆∞·ªõc
    PARTIAL_REFUND: 24,         // Ho√†n ti·ªÅn 50%: 24h tr∆∞·ªõc
    MINIMAL_REFUND: 6,          // Ho√†n ti·ªÅn 25%: 6h tr∆∞·ªõc
    NO_REFUND: 0                // Kh√¥ng ho√†n ti·ªÅn: d∆∞·ªõi 6h
} as const;

// Grace period - cho ph√©p s·ª≠a/x√≥a t·ª± do trong th·ªùi gian n√†y
const GRACE_PERIOD_MINUTES = 10;

@Injectable()
export class BookRoomService {
    constructor(private readonly prismaService: PrismaService) { }

    private parseRoomImages(bookingData: any) {
        if (bookingData.Rooms?.image && typeof bookingData.Rooms.image === 'string') {
            try {
                bookingData.Rooms.image = JSON.parse(bookingData.Rooms.image);
            } catch (error) {
                bookingData.Rooms.image = [];
            }
        }
        return bookingData;
    }

    async findUserBookings(
        userId: number,
        page: string | number,
        pageSize: string | number,
    ) {
        const params = getPaginationParams(page, pageSize, 10);
        const where = {
            userId,
            isDeleted: false
        };

        const [bookRooms, totalItems] = await Promise.all([
            this.prismaService.bookRooms.findMany({
                where,
                take: params.pageSize,
                skip: params.skip,
                orderBy: { createdAt: 'desc' },
                include: {
                    Rooms: {
                        select: {
                            id: true,
                            name: true,
                            price: true,
                            image: true,
                            Locations: { select: { name: true, province: true } }
                        }
                    }
                }
            }),
            this.prismaService.bookRooms.count({ where })
        ]);

        // T√≠nh to√°n th√™m th√¥ng tin cho m·ªói booking
        const enrichedBookings = bookRooms.map(booking => {
            const checkIn = new Date(booking.checkInDate);
            const checkOut = new Date(booking.checkOutDate);
            const nights = Math.ceil((checkOut.getTime() - checkIn.getTime()) / (1000 * 60 * 60 * 24));
            const totalPrice = Number(booking.Rooms.price) * nights;

            const bookingData = this.parseRoomImages(getSafeData([booking])[0]);

            return {
                ...bookingData,
                nights,
                totalPrice,
                pricePerNight: Number(booking.Rooms.price)
            };
        });

        return buildPaginationResult(enrichedBookings, totalItems, params, 'B·∫°n ch∆∞a c√≥ ƒë∆°n ƒë·∫∑t ph√≤ng n√†o');
    }

    async bookRoom(createBookRoomDto: CreateBookRoomDto, userId: number) {
        const { roomId, startDate, endDate, guestCount } = createBookRoomDto;

        // Validate ng√†y ƒë·∫∑t
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const checkIn = new Date(startDate);
        const checkOut = new Date(endDate);

        if (checkIn < today) {
            throw new BadRequestException('Ng√†y nh·∫≠n ph√≤ng ph·∫£i t·ª´ h√¥m nay tr·ªü ƒëi.');
        }
        if (checkIn >= checkOut) {
            throw new BadRequestException('Ng√†y tr·∫£ ph√≤ng ph·∫£i sau ng√†y nh·∫≠n ph√≤ng.');
        }

        // Ki·ªÉm tra ph√≤ng t·ªìn t·∫°i
        const room = await this.prismaService.rooms.findUnique({
            where: { id: roomId, isDeleted: false },
        });
        if (!room) throw new NotFoundException(`Ph√≤ng v·ªõi ID ${roomId} kh√¥ng t·ªìn t·∫°i.`);

        if (guestCount > room.guestCount) {
            throw new BadRequestException(`S·ªë l∆∞·ª£ng kh√°ch (${guestCount}) v∆∞·ª£t qu√° gi·ªõi h·∫°n c·ªßa ph√≤ng (${room.guestCount}).`);
        }

        // Ki·ªÉm tra xung ƒë·ªôt ƒë·∫∑t ph√≤ng (ch·ªâ nh·ªØng booking ch∆∞a b·ªã h·ªßy)
        const conflictBookings = await this.prismaService.bookRooms.findMany({
            where: {
                roomId,
                isDeleted: false,
                OR: [{ checkInDate: { lte: checkOut }, checkOutDate: { gte: checkIn } }],
            },
        });
        if (conflictBookings.length > 0) {
            throw new BadRequestException('Ph√≤ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong kho·∫£ng th·ªùi gian n√†y.');
        }

        // T√≠nh t·ªïng gi√° ti·ªÅn
        const nights = Math.ceil((checkOut.getTime() - checkIn.getTime()) / (1000 * 60 * 60 * 24));
        const totalPrice = Number(room.price) * nights;

        // T·∫°o booking
        const newBooking = await this.prismaService.bookRooms.create({
            data: {
                roomId,
                userId,
                checkInDate: checkIn,
                checkOutDate: checkOut,
                guestCount,
            },
            include: {
                Rooms: {
                    select: {
                        id: true,
                        name: true,
                        price: true,
                        image: true,
                        Locations: { select: { name: true, province: true } }
                    }
                },
                Users_BookRooms_userIdToUsers: {
                    select: { id: true, fullName: true, email: true, phone: true }
                }
            },
        });

        // Parse image JSON string th√†nh array
        const bookingData = this.parseRoomImages(getSafeData([newBooking])[0]);

        return {
            message: 'ƒê·∫∑t ph√≤ng th√†nh c√¥ng! Vui l√≤ng ch·ªù x√°c nh·∫≠n t·ª´ ch·ªß nh√†.',
            booking: {
                ...bookingData,
                totalPrice,
                nights,
                pricePerNight: Number(room.price)
            },
        };
    }

    async cancelBooking(bookingId: number, userId: number) {
        // Ki·ªÉm tra booking t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user
        const booking = await this.prismaService.bookRooms.findUnique({
            where: { id: bookingId, userId, isDeleted: false },
            include: { Rooms: { select: { name: true, price: true } } }
        });

        if (!booking) {
            throw new NotFoundException('Kh√¥ng t√¨m th·∫•y booking ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy booking n√†y.');
        }

        // Ki·ªÉm tra grace period v√† cancellation rules
        const now = new Date();
        const bookingCreatedAt = new Date(booking.createdAt);
        const checkInDate = new Date(booking.checkInDate);

        // T√≠nh th·ªùi gian t·ª´ khi ƒë·∫∑t ph√≤ng
        const minutesSinceBooking = (now.getTime() - bookingCreatedAt.getTime()) / (1000 * 60);
        const isInGracePeriod = minutesSinceBooking <= GRACE_PERIOD_MINUTES;

        // T√≠nh th·ªùi gian ƒë·∫øn check-in
        const timeDiff = checkInDate.getTime() - now.getTime();
        const hoursDiff = timeDiff / (1000 * 60 * 60);

        console.log(`üö´ Cancellation Request:`, {
            bookingId,
            minutesSinceBooking: Math.floor(minutesSinceBooking),
            isInGracePeriod,
            hoursRemaining: Math.floor(hoursDiff)
        });

        // X√°c ƒë·ªãnh ch√≠nh s√°ch h·ªßy
        let cancellationPolicy: {
            refundPercentage: number;
            description: string;
            policyType: string;
        };

        if (isInGracePeriod) {
            // Grace period: h·ªßy mi·ªÖn ph√≠
            cancellationPolicy = {
                refundPercentage: 1.0,
                description: 'H·ªßy trong grace period - Ho√†n ti·ªÅn 100%',
                policyType: 'grace'
            };
            console.log(`‚úÖ Grace period: Cho ph√©p h·ªßy mi·ªÖn ph√≠ trong ${GRACE_PERIOD_MINUTES} ph√∫t ƒë·∫ßu`);
        } else {
            // √Åp d·ª•ng cancellation rules b√¨nh th∆∞·ªùng
            cancellationPolicy = this.getCancellationPolicy(hoursDiff);

            // Ki·ªÉm tra c√≥ ƒë∆∞·ª£c ph√©p h·ªßy kh√¥ng
            if (hoursDiff < CANCELLATION_RULES.MINIMAL_REFUND) {
                throw new BadRequestException(
                    `Kh√¥ng th·ªÉ h·ªßy booking khi c√≤n √≠t h∆°n ${CANCELLATION_RULES.MINIMAL_REFUND} gi·ªù tr∆∞·ªõc ng√†y nh·∫≠n ph√≤ng. ` +
                    `Hi·ªán t·∫°i ch·ªâ c√≤n ${Math.floor(hoursDiff)} gi·ªù. Vui l√≤ng li√™n h·ªá host ƒë·ªÉ th∆∞∆°ng l∆∞·ª£ng. ` +
                    `(Grace period ${GRACE_PERIOD_MINUTES} ph√∫t ƒë√£ h·∫øt)`
                );
            }
        }

        // T√≠nh to√°n refund amount
        const checkIn = new Date(booking.checkInDate);
        const checkOut = new Date(booking.checkOutDate);
        const nights = Math.ceil((checkOut.getTime() - checkIn.getTime()) / (1000 * 60 * 60 * 24));
        const totalPrice = Number(booking.Rooms.price) * nights;
        const refundAmount = Math.round(totalPrice * cancellationPolicy.refundPercentage);

        // Soft delete booking
        await this.prismaService.bookRooms.update({
            where: { id: bookingId },
            data: {
                isDeleted: true,
                deletedAt: new Date(),
                deletedBy: userId
            }
        });

        return {
            message: `ƒê√£ h·ªßy booking ph√≤ng "${booking.Rooms.name}" th√†nh c√¥ng.`,
            cancellationPolicy: {
                hoursBeforeCancellation: Math.floor(hoursDiff),
                refundPercentage: cancellationPolicy.refundPercentage,
                refundAmount,
                totalPrice,
                policyDescription: cancellationPolicy.description
            }
        };
    }

    // 1. L·∫•y t·∫•t c·∫£ ƒë·∫∑t ph√≤ng (Admin only)
    async findAllBookings(page: string | number, pageSize: string | number) {

        const params = getPaginationParams(page, pageSize);
        const where = { isDeleted: false };

        const [bookings, totalItems] = await Promise.all([
            this.prismaService.bookRooms.findMany({
                where,
                take: params.pageSize,
                skip: params.skip,
                orderBy: { createdAt: 'desc' },
                include: {
                    Rooms: {
                        select: {
                            id: true,
                            name: true,
                            price: true,
                            image: true,
                            Locations: { select: { name: true, province: true } }
                        }
                    },
                    Users_BookRooms_userIdToUsers: {
                        select: { id: true, fullName: true, email: true, phone: true }
                    }
                }
            }),
            this.prismaService.bookRooms.count({ where })
        ]);

        const enrichedBookings = bookings.map(booking => {
            const checkIn = new Date(booking.checkInDate);
            const checkOut = new Date(booking.checkOutDate);
            const nights = Math.ceil((checkOut.getTime() - checkIn.getTime()) / (1000 * 60 * 60 * 24));
            const totalPrice = Number(booking.Rooms.price) * nights;

            const bookingData = this.parseRoomImages(getSafeData([booking])[0]);

            return {
                ...bookingData,
                nights,
                totalPrice,
                pricePerNight: Number(booking.Rooms.price)
            };
        });

        return buildPaginationResult(
            enrichedBookings,
            totalItems,
            params,
            'Hi·ªán t·∫°i ch∆∞a c√≥ ƒë∆°n ƒë·∫∑t ph√≤ng n√†o'
        );
    }

    // 3. L·∫•y chi ti·∫øt ƒë·∫∑t ph√≤ng
    async findBookingDetail(bookingId: number, userId: number) {
        const booking = await this.prismaService.bookRooms.findUnique({
            where: { id: Number(bookingId), isDeleted: false },
            include: {
                Rooms: {
                    select: {
                        id: true,
                        name: true,
                        price: true,
                        image: true,
                        description: true,
                        guestCount: true,
                        bedroomCount: true,
                        bedCount: true,
                        bathroomCount: true,
                        Locations: { select: { name: true, province: true, country: true } },
                        Users_Rooms_hostIdToUsers: { select: { fullName: true, email: true, phone: true } }
                    }
                },
                Users_BookRooms_userIdToUsers: {
                    select: { id: true, fullName: true, email: true, phone: true }
                }
            }
        });

        if (!booking) {
            throw new NotFoundException('Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ph√≤ng v·ªõi ID n√†y');
        }

        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p: ch·ªâ user ƒë·∫∑t ph√≤ng ho·∫∑c admin m·ªõi xem ƒë∆∞·ª£c
        const user = await this.prismaService.users.findUnique({
            where: { id: userId },
            include: { Roles: { select: { name: true } } }
        });

        const isAdmin = user?.Roles.name === 'admin';
        const isOwner = booking.userId === userId;

        if (!isAdmin && !isOwner) {
            throw new BadRequestException('B·∫°n kh√¥ng c√≥ quy·ªÅn xem chi ti·∫øt ƒë·∫∑t ph√≤ng n√†y');
        }

        const checkIn = new Date(booking.checkInDate);
        const checkOut = new Date(booking.checkOutDate);
        const nights = Math.ceil((checkOut.getTime() - checkIn.getTime()) / (1000 * 60 * 60 * 24));
        const totalPrice = Number(booking.Rooms.price) * nights;

        const bookingData = this.parseRoomImages(getSafeData([booking])[0]);

        return {
            ...bookingData,
            nights,
            totalPrice,
            pricePerNight: Number(booking.Rooms.price)
        };
    }

    // 4. C·∫≠p nh·∫≠t ƒë·∫∑t ph√≤ng
    async updateBooking(bookingId: number, updateData: UpdateBookRoomDto, userId: number) {
        const booking = await this.prismaService.bookRooms.findUnique({
            where: { id: bookingId, userId, isDeleted: false },
            include: { Rooms: { select: { name: true, price: true, guestCount: true } } }
        });

        if (!booking) {
            throw new NotFoundException('Kh√¥ng t√¨m th·∫•y booking ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t booking n√†y');
        }

        // Ki·ªÉm tra grace period v√† time rules
        const now = new Date();
        const bookingCreatedAt = new Date(booking.createdAt);
        const checkInDate = new Date(booking.checkInDate);

        // T√≠nh th·ªùi gian t·ª´ khi ƒë·∫∑t ph√≤ng
        const minutesSinceBooking = (now.getTime() - bookingCreatedAt.getTime()) / (1000 * 60);
        const isInGracePeriod = minutesSinceBooking <= GRACE_PERIOD_MINUTES;

        // T√≠nh th·ªùi gian ƒë·∫øn check-in
        const timeDiff = checkInDate.getTime() - now.getTime();
        const hoursDiff = timeDiff / (1000 * 60 * 60);

        console.log(`üìù Booking Update Request:`, {
            bookingId,
            minutesSinceBooking: Math.floor(minutesSinceBooking),
            isInGracePeriod,
            hoursRemaining: Math.floor(hoursDiff),
            updateData
        });

        // N·∫øu trong grace period, cho ph√©p update t·ª± do
        if (isInGracePeriod) {
            console.log(`‚úÖ Grace period: Cho ph√©p update t·ª± do trong ${GRACE_PERIOD_MINUTES} ph√∫t ƒë·∫ßu`);
        } else {
            // √Åp d·ª•ng time rules b√¨nh th∆∞·ªùng
            const changeType = this.determineChangeType(updateData);
            const minHoursRequired = this.getMinHoursRequired(changeType);

            if (hoursDiff < minHoursRequired) {
                const changeTypeText = this.getChangeTypeText(changeType);
                throw new BadRequestException(
                    `${changeTypeText} c·∫ßn √≠t nh·∫•t ${minHoursRequired} gi·ªù tr∆∞·ªõc ng√†y nh·∫≠n ph√≤ng. ` +
                    `Hi·ªán t·∫°i ch·ªâ c√≤n ${Math.floor(hoursDiff)} gi·ªù. ` +
                    `(Grace period ${GRACE_PERIOD_MINUTES} ph√∫t ƒë√£ h·∫øt)`
                );
            }
        }

        const { startDate, endDate, guestCount } = updateData;

        // X√°c ƒë·ªãnh gi√° tr·ªã cu·ªëi c√πng (s·ª≠ d·ª•ng gi√° tr·ªã c≈© n·∫øu kh√¥ng c√≥ gi√° tr·ªã m·ªõi)
        const finalCheckIn = startDate ? new Date(startDate) : new Date(booking.checkInDate);
        const finalCheckOut = endDate ? new Date(endDate) : new Date(booking.checkOutDate);
        const finalGuestCount = guestCount ?? booking.guestCount;

        // Validate dates
        if (finalCheckIn >= finalCheckOut) {
            throw new BadRequestException('Ng√†y tr·∫£ ph√≤ng ph·∫£i sau ng√†y nh·∫≠n ph√≤ng');
        }

        // Validate guest count
        if (finalGuestCount > booking.Rooms.guestCount) {
            throw new BadRequestException(`S·ªë l∆∞·ª£ng kh√°ch v∆∞·ª£t qu√° gi·ªõi h·∫°n c·ªßa ph√≤ng (${booking.Rooms.guestCount})`);
        }

        // Ki·ªÉm tra xung ƒë·ªôt v·ªõi booking kh√°c (ch·ªâ khi c√≥ thay ƒë·ªïi ng√†y)
        if (startDate || endDate) {
            const conflictBookings = await this.prismaService.bookRooms.findMany({
                where: {
                    roomId: booking.roomId,
                    isDeleted: false,
                    id: { not: bookingId },
                    OR: [{ checkInDate: { lte: finalCheckOut }, checkOutDate: { gte: finalCheckIn } }],
                },
            });

            if (conflictBookings.length > 0) {
                throw new BadRequestException('Ph√≤ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong kho·∫£ng th·ªùi gian m·ªõi n√†y');
            }
        }

        // T·∫°o object update data ch·ªâ v·ªõi c√°c field ƒë∆∞·ª£c cung c·∫•p
        const updateDataObj: any = {
            updatedAt: new Date()
        };

        if (startDate) updateDataObj.checkInDate = finalCheckIn;
        if (endDate) updateDataObj.checkOutDate = finalCheckOut;
        if (guestCount !== undefined) updateDataObj.guestCount = finalGuestCount;

        // C·∫≠p nh·∫≠t booking
        const updatedBooking = await this.prismaService.bookRooms.update({
            where: { id: bookingId },
            data: updateDataObj,
            include: {
                Rooms: {
                    select: {
                        id: true,
                        name: true,
                        price: true,
                        image: true,
                        Locations: { select: { name: true, province: true } }
                    }
                }
            }
        });

        const nights = Math.ceil((finalCheckOut.getTime() - finalCheckIn.getTime()) / (1000 * 60 * 60 * 24));
        const totalPrice = Number(booking.Rooms.price) * nights;

        const bookingData = this.parseRoomImages(getSafeData([updatedBooking])[0]);

        return {
            message: 'C·∫≠p nh·∫≠t ƒë·∫∑t ph√≤ng th√†nh c√¥ng',
            booking: {
                ...bookingData,
                nights,
                totalPrice,
                pricePerNight: Number(booking.Rooms.price)
            }
        };
    }

    // 6. L·∫•y ƒë·∫∑t ph√≤ng theo user 
    async findBookingsByUser(userId: number, page: string | number, pageSize: string | number, adminId: number) {
        // Ki·ªÉm tra quy·ªÅn admin
        const admin = await this.prismaService.users.findUnique({
            where: { id: adminId },
            include: { Roles: { select: { name: true } } }
        });

        if (!admin || admin.Roles.name !== 'ADMIN' && userId === 2) {
            throw new BadRequestException('Ch·ªâ admin m·ªõi c√≥ quy·ªÅn xem ƒë·∫∑t ph√≤ng c·ªßa ng∆∞·ªùi d√πng kh√°c');
        }
        const params = getPaginationParams(page, pageSize);

        // Ki·ªÉm tra user t·ªìn t·∫°i
        const user = await this.prismaService.users.findUnique({
            where: { id: userId },
            select: { id: true, fullName: true, email: true }
        });

        if (!user) {
            throw new NotFoundException('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID n√†y');
        }

        const where = { userId, isDeleted: false };

        const [bookings, totalItems] = await Promise.all([
            this.prismaService.bookRooms.findMany({
                where,
                take: params.pageSize,
                skip: params.skip,
                orderBy: { createdAt: 'desc' },
                include: {
                    Rooms: {
                        select: {
                            id: true,
                            name: true,
                            price: true,
                            image: true,
                            Locations: { select: { name: true, province: true } }
                        }
                    }
                }
            }),
            this.prismaService.bookRooms.count({ where })
        ]);

        const enrichedBookings = bookings.map(booking => {
            const checkIn = new Date(booking.checkInDate);
            const checkOut = new Date(booking.checkOutDate);
            const nights = Math.ceil((checkOut.getTime() - checkIn.getTime()) / (1000 * 60 * 60 * 24));
            const totalPrice = Number(booking.Rooms.price) * nights;

            const bookingData = this.parseRoomImages(getSafeData([booking])[0]);

            return {
                ...bookingData,
                nights,
                totalPrice,
                pricePerNight: Number(booking.Rooms.price)
            };
        });

        const result = buildPaginationResult(
            enrichedBookings,
            totalItems,
            params,
            `Ng∆∞·ªùi d√πng ${user.fullName} ch∆∞a c√≥ ƒë∆°n ƒë·∫∑t ph√≤ng n√†o`
        );

        return {
            user,
            ...result
        };
    }

    // X√°c nh·∫≠n ƒë·∫∑t ph√≤ng (Host only) - T·∫°m th·ªùi return message ƒë∆°n gi·∫£n
    async confirmBooking(bookingId: number, userId: number) {
        // L·∫•y th√¥ng tin booking v√† room
        const booking = await this.prismaService.bookRooms.findUnique({
            where: { id: bookingId, isDeleted: false },
            include: {
                Rooms: {
                    select: { id: true, name: true, hostId: true }
                },
                Users_BookRooms_userIdToUsers: {
                    select: { id: true, fullName: true, email: true }
                }
            }
        });

        if (!booking) {
            throw new NotFoundException('Kh√¥ng t√¨m th·∫•y ƒë∆°n ƒë·∫∑t ph√≤ng');
        }

        // Ki·ªÉm tra user c√≥ ph·∫£i host c·ªßa ph√≤ng kh√¥ng
        const user = await this.prismaService.users.findUnique({
            where: { id: userId },
            include: { Roles: { select: { name: true } } }
        });

        if (!user) {
            throw new ForbiddenException('Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i');
        }

        const isAdmin = user.Roles.name === 'ADMIN';
        const isRoomHost = booking.Rooms.hostId === userId;

        if (!isAdmin && !isRoomHost) {
            throw new ForbiddenException('Ch·ªâ host c·ªßa ph√≤ng ho·∫∑c admin m·ªõi c√≥ th·ªÉ x√°c nh·∫≠n ƒë·∫∑t ph√≤ng');
        }

        // Ki·ªÉm tra booking ƒë√£ b·ªã h·ªßy ch∆∞a
        if (booking.isDeleted) {
            throw new BadRequestException('Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë∆°n ƒë·∫∑t ph√≤ng ƒë√£ b·ªã h·ªßy');
        }

        return {
            message: `Host ƒë√£ x√°c nh·∫≠n ƒë·∫∑t ph√≤ng "${booking.Rooms.name}" cho kh√°ch h√†ng ${booking.Users_BookRooms_userIdToUsers.fullName}`,
            booking: getSafeData([booking])[0],
            confirmedBy: user.fullName,
            confirmedAt: new Date()
        };
    }

    // Helper methods cho flexible update rules
    private determineChangeType(updateData: UpdateBookRoomDto): string {
        const { startDate, endDate, guestCount } = updateData;

        if (startDate || endDate) {
            return 'dates'; // Thay ƒë·ªïi ng√†y - quan tr·ªçng nh·∫•t
        } else if (guestCount) {
            return 'guests'; // Ch·ªâ thay ƒë·ªïi s·ªë kh√°ch
        } else {
            return 'minor'; // Thay ƒë·ªïi nh·ªè kh√°c
        }
    }

    private getMinHoursRequired(changeType: string): number {
        switch (changeType) {
            case 'dates':
                return UPDATE_TIME_RULES.DATES_CHANGE;
            case 'guests':
                return UPDATE_TIME_RULES.GUESTS_CHANGE;
            case 'minor':
                return UPDATE_TIME_RULES.MINOR_CHANGE;
            default:
                return UPDATE_TIME_RULES.DEFAULT;
        }
    }

    private getChangeTypeText(changeType: string): string {
        switch (changeType) {
            case 'dates':
                return 'Thay ƒë·ªïi ng√†y nh·∫≠n/tr·∫£ ph√≤ng';
            case 'guests':
                return 'Thay ƒë·ªïi s·ªë l∆∞·ª£ng kh√°ch';
            case 'minor':
                return 'C·∫≠p nh·∫≠t th√¥ng tin booking';
            default:
                return 'Thay ƒë·ªïi booking';
        }
    }

    // Helper method cho cancellation policy
    private getCancellationPolicy(hoursDiff: number): {
        refundPercentage: number;
        description: string;
        policyType: string;
    } {
        if (hoursDiff >= CANCELLATION_RULES.FREE_CANCELLATION) {
            return {
                refundPercentage: 1.0,
                description: 'H·ªßy mi·ªÖn ph√≠ - Ho√†n ti·ªÅn 100%',
                policyType: 'free'
            };
        } else if (hoursDiff >= CANCELLATION_RULES.PARTIAL_REFUND) {
            return {
                refundPercentage: 0.5,
                description: 'H·ªßy mu·ªôn - Ho√†n ti·ªÅn 50%',
                policyType: 'partial'
            };
        } else if (hoursDiff >= CANCELLATION_RULES.MINIMAL_REFUND) {
            return {
                refundPercentage: 0.25,
                description: 'H·ªßy r·∫•t mu·ªôn - Ho√†n ti·ªÅn 25%',
                policyType: 'minimal'
            };
        } else {
            return {
                refundPercentage: 0.0,
                description: 'Kh√¥ng ho√†n ti·ªÅn',
                policyType: 'none'
            };
        }
    }
}
